name: Auto Publish to PyPI

on:
  push:
    branches: [main]

jobs:
  build-and-publish:
    permissions:
      contents: write
      id-token: write # 必须添加这一行

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Debug project structure
      run: |
        ls -la
        tree -a || echo "tree command not available"
        cat pyproject.toml
        cat encrypt_tools_library/__init__.py || echo "No __init__.py found"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade build setuptools>=61.0 wheel twine check-wheel-contents

    - name: Clean build artifacts
      run: |
        rm -rf dist/ build/ *.egg-info/
        find . -name '__pycache__' -exec rm -rf {} +

    - name: Verify project structure
      run: |
        [ -f pyproject.toml ] || exit 1
        [ -d encrypt_tools_library ] || exit 1
        [ -f encrypt_tools_library/__init__.py ] || exit 1
        grep -q "__version__" encrypt_tools_library/__init__.py || (echo "__version__ not found in __init__.py" && exit 1)
        echo "Project structure verified"

    - name: Build package
      run: |
        python -m build --no-isolation --verbose
        # 验证wheel文件基本结构
        ls -l dist/*.whl
        unzip -t dist/*.whl

    - name: Validate package metadata
      run: |
        # 安装检查工具
        pip install check-wheel-contents
        # 检查关键元数据字段
        unzip -p dist/*.whl *dist-info/METADATA | grep -E "Name:|Version:" || (echo "Missing required metadata" && exit 1)
        # 完整wheel验证
        check-wheel-contents dist/*.whl || echo "Wheel validation warning (non-blocking)"

    - name: Install and test package
      run: |
        pip install dist/*.whl
        python -c "from encrypt_tools_library import __version__; print(f'Package version: {__version__}')"

    - name: Get version
      id: get_version
      run: |
        VERSION=$(python -c "from importlib.metadata import version; print(version('encrypt_tools_library'))")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Git tag
      if: success()
      uses: rickstaa/action-create-tag@v1
      with:
        tag: v${{ steps.get_version.outputs.version }}
        message: "Release v${{ steps.get_version.outputs.version }}"

    - name: Publish to PyPI
      if: success()
      uses: pypa/gh-action-pypi-publish@v1.10.0
      with:
        skip-existing: true
        verbose: true