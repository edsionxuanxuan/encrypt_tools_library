name: Auto Publish to PyPI

on:
  push:
    branches: [main]

jobs:
  build-and-publish:
    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 确保获取完整git历史

    - name: Debug project structure
      run: |
        ls -la
        tree -a || echo "tree command not available"
        cat pyproject.toml

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'  # 添加缓存加速

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade build setuptools>=61.0 wheel twine

    - name: Clean build artifacts
      run: |
        rm -rf dist/ build/ *.egg-info/
        find . -name '__pycache__' -exec rm -rf {} +

    - name: Verify project structure
      run: |
        [ -f pyproject.toml ] || exit 1
        [ -d encrypt_tools_library ] || exit 1
        [ -f encrypt_tools_library/__init__.py ] || exit 1
        echo "Project structure verified"

    - name: Build package (with debug)
      run: |
        python -m build --no-isolation --verbose
        # 验证生成的wheel
        pip install wheel
        check-wheel-contents dist/*.whl

    - name: Inspect METADATA
      run: |
        unzip -p dist/*.whl *dist-info/METADATA
        unzip -p dist/*.whl *dist-info/RECORD

    - name: Get version
      id: get_version
      run: |
        VERSION=$(python -c "from importlib.metadata import version; print(version('encrypt_tools_library'))")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Git tag
      if: success()
      uses: rickstaa/action-create-tag@v1
      with:
        tag: v${{ steps.get_version.outputs.version }}
        message: "Release v${{ steps.get_version.outputs.version }}"

    - name: Publish to PyPI
      if: success()
      uses: pypa/gh-action-pypi-publish@v1.10.0
      with:
        skip-existing: true  # 避免重复发布错误
        verbose: true